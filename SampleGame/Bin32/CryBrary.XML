<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryBrary</name>
    </assembly>
    <members>
        <member name="T:CryEngine.ScriptCompiler">
            <summary>
            The script compiler is responsible for all CryScript compilation.
            </summary>
        </member>
        <member name="M:CryEngine._ScriptCompiler.ConvertToCSharp(System.String@)">
            <summary>
            Finds C++-specific types in the provided string and substitutes them for C# types.
            </summary>
            <param name="cplusplusTypes"></param>
        </member>
        <member name="M:CryEngine._ScriptCompiler.LoadLibrariesInFolder(System.String)">
            <summary>
            This function will automatically scan for C# dll (*.dll) files and load the types contained within them.
            </summary>
        </member>
        <member name="M:CryEngine._ScriptCompiler.CompileScriptsInFolder(System.String)">
            <summary>
            This function will automatically scan for C# (*.cs) files and compile them using CompileScripts.
            </summary>
        </member>
        <member name="M:CryEngine._ScriptCompiler.CompileScripts(System.String[])">
            <summary>
            Compiles the scripts and compiles them into an assembly.
            </summary>
            <param name="scripts">A string array containing full paths to scripts to be compiled.</param>
            <returns></returns>
        </member>
        <member name="F:CryEngine._ScriptCompiler._requestedAssemblies">
            <summary>
            We keep an internal list of requested assemblies from CryGameCode to avoid duplication when loading them.
            </summary>
        </member>
        <member name="M:CryEngine._ScriptCompiler.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads an C# assembly and return encapulsated script Type.
            </summary>
        </member>
        <member name="F:CryEngine._ScriptCompiler.m_referencedAssemblies">
            <summary>
            All libraries passed through LoadLibrariesInFolder will be automatically added to this list.
            </summary>
        </member>
        <member name="M:CryEngine.ScriptCompiler.InstantiateScript(System.String,System.Object[])">
            <summary>
            Instantiates a script using its name and interface.
            </summary>
            <param name="scriptName"></param>
            <returns>New instance scriptId or -1 if instantiation failed.</returns>
        </member>
        <member name="M:CryEngine.ScriptCompiler.RegisterScriptbind(System.String,System.String,System.Object[])">
            <summary>
            Automagically registers scriptbind methods to rid us of having to add them in both C# and C++.
            </summary>
        </member>
        <member name="M:CryEngine.ScriptCompiler.OnUpdate(System.Single)">
            <summary>
            Called once per frame.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.GameRules">
            <summary>
            Scripts directly inheriting from BaseGameRules will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.FlowNode">
            <summary>
            Scripts directly inheriting from FlowNode will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.StaticEntity">
            <summary>
            Scripts directly inheriting from StaticEntity will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.Entity">
            <summary>
            Scripts directly inheriting from Entity will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.Actor">
            <summary>
            Scripts directly inheriting from Actor will utilize this script type.
            </summary>
        </member>
        <member name="F:CryEngine.MonoScriptType.Other">
            <summary>
            Scripts will be linked to this type if they inherit from CryScriptInstance, but not any other script base.
            </summary>
        </member>
        <member name="T:CryEngine.CryScript">
            <summary>
            Represents a given class.
            </summary>
        </member>
        <member name="P:CryEngine.CryScript.ScriptInstances">
            <summary>
            Stores all instances of this class.
            </summary>
        </member>
        <member name="F:CryEngine.Scriptbind.methods">
            <summary>
            Array of InternalCallMethod
            </summary>
        </member>
        <member name="T:CryEngine.Utils.CryStats">
            <summary>
            CryStats enables tracking of commonly used library statistics such as memory usage.
            </summary>
        </member>
        <member name="P:CryEngine.Utils.CryStats.MemoryUsageMB">
            <summary>
            The current approximate memory usage in megabytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utils.CryStats.MemoryUsageKB">
            <summary>
            The current approximate memory usage in kilobytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utils.CryStats.MemoryUsage">
            <summary>
            The current approximate memory usage in bytes.
            </summary>
        </member>
        <member name="T:CryEngine.Console">
            <summary>
            The Console provides access to CryENGINE's console interface, including redirecting .NET logging to
            the CryENGINE console.
            Additionally, it handles CVar / CCommand interpretation.
            </summary>
        </member>
        <member name="M:CryEngine.Console.#ctor">
            <summary>
            Constructs a new CryConsole object and sets up output redirection and error tracing.
            </summary>
        </member>
        <member name="M:CryEngine.Console.Log(System.String,System.Object[])">
            <summary>
            Logs a message to the console
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Console.Log(System.String)">
            <summary>
            Logs a message to the console
            </summary>
        </member>
        <member name="M:CryEngine.Console.LogAlways(System.String,System.Object[])">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Console.LogAlways(System.String)">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
        </member>
        <member name="M:CryEngine.Console.LogException(System.Exception)">
            <summary>
            Logs an exception message to the console
            </summary>
            <remarks>Useful when exceptions are caught and data is still needed from them</remarks>
            <param name="ex"></param>
        </member>
        <member name="M:CryEngine.Console.Warning(System.String,System.Object[])">
            <summary>
            Outputs a warning message
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Console.Warning(System.String)">
            <summary>
            Outputs a warning message
            </summary>
        </member>
        <member name="M:CryEngine.Console.RegisterCVar``1(System.String,``0,CryEngine.CVarFlags,System.String)">
            <summary>
            Invoked by a CVar after its creation. Should <b>not</b> be visible outside this assembly.
            </summary>
        </member>
        <member name="M:CryEngine.Console.GetCVar(System.String)">
            <summary>
            Gets a CVar by name
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Console.TryGetCVar(System.String,CryEngine.CVar@)">
            <summary>
            Firstly checks whether a specified CVar is valid, then if so, modifies the cvar reference
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <param name="cvar">The CVar object to modify (usually blank)</param>
            <returns>True if the CVar exists, otherwise false</returns>
        </member>
        <member name="M:CryEngine.Console.OnMonoCmd(System.String)">
            <summary>
            Called from C++ when a console command registered via Mono is invoked.
            </summary>
            <param name="cmdName"></param>
        </member>
        <member name="T:CryEngine.ItemSystem">
            <summary>
            ItemSystem contains scriptbinds used in relation to the item system.
            </summary>
        </member>
        <member name="T:CryEngine.CryScriptInstance">
            <summary>
            This interface permits derived classes to be used for script compilation recognition.
            </summary>
        </member>
        <member name="M:CryEngine.CryScriptInstance.OnUpdate">
            <summary>
            Called each frame if script has been set to be regularly updated (See Updated property)
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.ReceiveUpdates">
            <summary>
            Controls whether the entity receives an update per frame.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.OnPortActivated(System.Int32,System.Object)">
            <summary>
            Called if one or more input ports have been activated.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.OnInit">
            <summary>
            Called after level has been loaded, is not called on serialization.
            </summary>
        </member>
        <member name="M:CryEngine.FlowNode.ActivateOutput(System.Int32)">
            <summary>
            Activates one of the node's output ports, without an output value. (Used for outputs of type NodePortType.Void)
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:CryEngine.FlowNode.ActivateOutput(System.Int32,System.Object)">
            <summary>
            Activates one of the node's output ports, with the desired output value.
            </summary>
            <param name="port">The id of the port, from the order it was registered (first is 0)</param>
            <param name="value"></param>
        </member>
        <member name="M:CryEngine.FlowNode.IsPortActive(System.Int32)">
            <summary>
            Used to check whether an input port is currently activated.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.Name">
            <summary>
            Name of the node, if not set will use the node class name.
            </summary>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.UICategory">
            <summary>
            Category in which the node will appear when right-clicking in the Flowgraph Editor.
            </summary>
        </member>
        <member name="P:CryEngine.FlowNodeAttribute.Category">
            <summary>
            The Sandbox filtering category
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.TargetEntity">
            <summary>
            This node targets an entity, entity id must be provided.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.HideUI">
            <summary>
            This node cannot be selected by user for placement in flow graph UI.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeFlags.DynamicOutput">
            <summary>
            This node is setup for dynamic output port growth in runtime.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Approved">
            <summary>
            This node is approved for designers
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Advanced">
            <summary>
            This node is slightly advanced and approved.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Debug">
            <summary>
            This node is for debug purpose only.
            </summary>
        </member>
        <member name="F:CryEngine.FlowNodeCategory.Obsolete">
            <summary>
            This node is obsolete and is not available in the editor.
            </summary>
        </member>
        <member name="T:CryEngine.StaticEntity">
            <summary>
            Static entities must inherit this in order to be registered.
            It is no longer an interface, due to basic functionality each entity <b>must</b> have.
            </summary>
        </member>
        <member name="M:CryEngine.StaticEntity._LoadObject(System.UInt32,System.String,System.Int32)">
            <summary>
            Loads a static model on the object (.cgf).
            </summary>
            <param name="entityId"></param>
            <param name="fileName"></param>
            <param name="slot"></param>
        </member>
        <member name="M:CryEngine.StaticEntity._LoadCharacter(System.UInt32,System.String,System.Int32)">
            <summary>
            Loads an non-static model on the object (.chr, .cdf, .cga)
            </summary>
            <param name="entityId"></param>
            <param name="fileName"></param>
            <param name="slot"></param>
        </member>
        <member name="M:CryEngine.StaticEntity.InternalSpawn(System.UInt32)">
            <summary>
            Initializes the entity, not recommended to set manually.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:CryEngine.StaticEntity.OnSpawn">
            <summary>
            This callback is called when this entity has finished spawning. The entity has been created and added to the list of entities.
            </summary>
        </member>
        <member name="M:CryEngine.StaticEntity.OnRemove">
            <summary>
            Called when the entity is being removed.
            </summary>
            <returns>True to allow removal, false to deny.</returns>
        </member>
        <member name="M:CryEngine.StaticEntity.OnReset(System.Boolean)">
            <summary>
            Called when resetting the state of the entity in Editor.
            </summary>
            <param name="enteringGame">true if currently entering gamemode, false if exiting.</param>
        </member>
        <member name="M:CryEngine.StaticEntity.OnStartGame">
            <summary>
            Called when game is started (games may start multiple times)
            </summary>
        </member>
        <member name="M:CryEngine.StaticEntity.OnStartLevel">
            <summary>
            Called when the level is started.
            </summary>
        </member>
        <member name="M:CryEngine.StaticEntity.OnEnterArea(System.UInt32,System.UInt32)">
            <summary>
            Sent when triggering entity enters to the area proximity.
            </summary>
            <param name="triggerEntityId"></param>
            <param name="areaEntityId"></param>
        </member>
        <member name="M:CryEngine.StaticEntity.OnLeaveArea(System.UInt32,System.UInt32)">
            <summary>
            Sent when triggering entity leaves the area proximity.
            </summary>
            <param name="triggerEntityId"></param>
            <param name="areaEntityId"></param>
        </member>
        <member name="F:CryEngine.StaticEntity.storedProperties">
            <summary>
            Temporarily stored so we can set them properly on spawn.
            </summary>
        </member>
        <member name="M:CryEngine.StaticEntity.LoadObject(System.String,System.Int32)">
            <summary>
            Loads a mesh for this entity. Can optionally load multiple meshes using entity slots.
            </summary>
            <param name="name"></param>
            <param name="slotNumber"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.CryNetwork.InitializeNetworkStatics(System.Boolean,System.Boolean)">
            <summary>
            Initializes static variables which never change, i.e. IsEditor.
            </summary>
            <param name="isEditor"></param>
            <param name="isDedicated"></param>
        </member>
        <member name="M:CryEngine.CryNetwork.InitializeNetwork(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes variables which change, i.e. IsServer.
            </summary>
            <param name="isClient"></param>
            <param name="isServer"></param>
        </member>
        <member name="T:CryEngine.GameRulesSystem">
            <summary>
            GameRules contains scriptbinds used in relation to the game rules system.
            </summary>
        </member>
        <member name="T:CryEngine.Entity">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.Entity.InternalSpawn(System.UInt32)">
            <summary>
            Initializes the entity, not recommended to set manually.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="T:CryEngine.EntityAttribute">
            <summary>
            Defines additional information used by the entity registration system.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.EditorHelper">
            <summary>
            The helper mesh displayed inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Flags">
            <summary>
            The class flags for this entity.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Category">
            <summary>
            The category in which the entity will be placed.
            Does not currently function. All entities are placed inside the Default folder.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Icon">
            <summary>
            The helper graphic displayed inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.EditorPropertyAttribute">
            <summary>
            Defines a property that is displayed and editable inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Type">
            <summary>
            If set, overrides the field type.
            Should be used for special types such as files.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Description">
            <summary>
            The description to display when the user hovers over this property inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.EntityPropertyType">
            <summary>
            Defines the list of supported editor types.
            Bool is not currently functioning.
            </summary>
        </member>
        <member name="T:CryEngine.PathUtils">
            <summary>
            CryPath provides a clean method of retrieving commonly used engine filepaths.
            </summary>
        </member>
        <member name="M:CryEngine.PathUtils.GetRootFolder">
            <summary>
            Gets the root engine folder.
            </summary>
            <returns>The filepath to the root folder as a string, ex:</returns>
            <example>"C:\CryENGINE3\"</example>
        </member>
        <member name="M:CryEngine.PathUtils.GetBinaryFolder">
            <summary>
            Gets the current folder containing binaries relevant to current build type (Bin32 / Bin64).
            </summary>
            <returns>The filepath to the Binary folder as a string, ex:
            <example>"C:\CryENGINE3\Bin32\"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetEngineFolder">
            <summary>
            Gets the engine folder.
            CryENGINE uses this store engine content which is not specific to the game being developed, i.e. shaders and configuration files.
            </summary>
            <returns>The filepath to the Engine folder as a string, ex:
            <example>"C:\CryENGINE3\Engine\"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetGameFolder">
            <summary>
            Gets the current game folder.
            CryENGINE uses this as the root for all game-related content.
            </summary>
            <returns>The filepath to the Game folder as a string, ex:
            <example>"C:\CryENGINE3\Game\"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetScriptsFolder">
            <summary>
            Gets the folder in which the engine stores scripts.
            We use this as the root for our .cs files and .dll plugins.
            </summary>
            <returns>The filepath to the Scripts folder as a string, ex:
            <example>"C:\CryENGINE3\Game\Scripts\"</example></returns>
        </member>
        <member name="M:CryEngine.PathUtils.GetScriptFolder(CryEngine.MonoScriptType)">
            <summary>
            Gets the folder in which a certain type of scripts are located.
            </summary>
            <param name="scriptType"></param>
            <returns>The folder in which scripts of this type are located; i.e. Game\Scripts\Entities</returns>
            <example>GetScriptFolder(MonoScriptType.Entity)</example>
        </member>
        <member name="M:CryEngine.EntitySystem.SpawnEntity(CryEngine.EntitySpawnParams,System.Boolean)">
            <summary>
            Spawns an entity with the specified parameters.
            </summary>
            <param name="spawnParams">The <see cref="T:CryEngine.EntitySpawnParams"/></param>
            <param name="autoInit">Should the entity automatically be initialised?</param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.EntitySystem.RegisterEntityClass(CryEngine.EntityConfig)">
            <summary>
            Register a new entity type.
            </summary>
            <param name="config">The Entity configuration.</param>
            <returns>True if registration succeeded, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.EntitySystem.GetEntity(System.UInt32)">
            <summary>
            Get an entity by its unique ID.
            </summary>
            <param name="entityId">The ID as an unsigned integer.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If the entity does not exist in the managed space, this function will attempt to find
            a C++ entity with the specified ID></remarks>
        </member>
        <member name="M:CryEngine.EntitySystem.GetEntity(System.String)">
            <summary>
            Get an entity by name.
            </summary>
            <param name="name">The name of the entity.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If multiple entities have the same name, it will return the first found.
            Consider using IDs where necessary.</remarks>
        </member>
        <member name="M:CryEngine.EntitySystem.GetEntities(System.String)">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <param name="className">The entity class to search for.</param>
            <returns>An array of entities.</returns>
        </member>
        <member name="M:CryEngine.EntitySystem.GetEntities``1">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <typeparam name="T">The entity class to search for.</typeparam>
            <returns>An array of entities of type T.</returns>
        </member>
        <member name="F:CryEngine.EntitySystem.m_internalEntities">
            <summary>
            Contains the entities registered with mono.
            EntityId, Entity are stored in here. EntityId is also stored within Entity, but storing it seperately here provides for fast lookup and rids of us too many foreach loops.
            </summary>
        </member>
        <member name="T:CryEngine.EntityFlags">
            <summary>
            These flags control entity instance behaviour.
            </summary>
        </member>
        <member name="T:CryEngine.EntityClassFlags">
            <summary>
            These flags define behaviour for entity classes.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Invisible">
            <summary>
            If set this class will not be visible in editor,and entity of this class cannot be placed manually in editor.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Default">
            <summary>
            If this is default entity class.
            </summary>
        </member>
        <member name="F:CryEngine.EntityConfig.registerParams">
            <summary>
            The registration information.
            </summary>
        </member>
        <member name="F:CryEngine.EntityConfig.properties">
            <summary>
            The properties that will be displayed inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.Renderer">
            <summary>
            Renderer functionality; TODO
            </summary>
        </member>
        <member name="M:CryEngine.PhysicalWorld.RayWorldIntersection(CryEngine.Vec3,CryEngine.Vec3,System.Int32,CryEngine.PhysicalWorld.RayWorldIntersectionFlag,CryEngine.PhysicalWorld.RayHit@,System.Int32,System.UInt32[])">
            <summary>
            Steps through the entity grid and raytraces entities
            traces a finite ray from org along dir
            </summary>
            <param name="origin"></param>
            <param name="dir"></param>
            <param name="objectTypes"></param>
            <param name="flags"></param>
            <param name="hits"></param>
            <param name="maxHits"></param>
            <param name="skipEntities"></param>
            <returns>The total amount of hits detected (solid and pierceable)</returns>
        </member>
        <member name="F:CryEngine.PhysicalWorld.RayWorldIntersectionFlag.SeperateImportantHits">
            <summary>
            among pierceble hits, materials with sf_important will have priority
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalWorld.RayWorldIntersectionFlag.CollissionTypeAny">
            <summary>
            if several colltype flag are specified, switches between requiring all or any of them in a geometry
            </summary>
        </member>
        <member name="T:CryEngine.Vec3">
            <summary>
            The Vec3 struct is used for all 3D coordinates within the engine.
            TODO: Implement a Quat class for rotation in place of angles.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.op_UnaryNegation(CryEngine.Vec3)">
            <summary>
            Negate this vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.op_Addition(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Add two vectors component-wise.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.op_Subtraction(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Subtract two vectors component-wise.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.op_Multiply(CryEngine.Vec3,System.Single)">
            <summary>
            Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.op_Multiply(System.Single,CryEngine.Vec3)">
            <summary>
            Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.Dot(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Perform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.Cross(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Perform the cross product on two vectors.
            </summary>
        </member>
        <member name="T:CryEngine.BaseGameRules">
            <summary>
            This is the base GameRules interface. All game rules must implement this.
            </summary>
            <remarks>For most use cases, deriving from CryGameCode's BaseGameRules is a more efficient solution.</remarks>
        </member>
        <member name="F:CryEngine.HitInfo.shooterId">
            <summary>
            EntityId of the shooter
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.targetId">
            <summary>
            EntityId of the target which got shot
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.weaponId">
            <summary>
            EntityId of the weapon
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.projectileId">
            <summary>
            0 if hit was not caused by a projectile
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.damage">
            <summary>
            damage count of the hit
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.angle">
            <summary>
            radius of the hit
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.material">
            <summary>
            material id of the surface which got hit
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.type">
            <summary>
            type id of the hit, see IGameRules::GetHitTypeId for more information
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.bulletType">
            <summary>
            type of bullet, if hit was of type bullet
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.pierce">
            <summary>
            bullet pierceability
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.pos">
            <summary>
            position of the hit
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.dir">
            <summary>
            direction of the hit
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.aimed">
            <summary>
            set to true if shot was aimed - i.e. first bullet, zoomed in etc.
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.knocksDown">
            <summary>
            true if the hit should knockdown
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.knocksDownLeg">
            <summary>
            true if the hit should knockdown when hit in a leg
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.hitViaProxy">
            <summary>
            true if the 'shooter' didn't actually shoot, ie. a weapon acting on their behalf did (team perks)
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.explosion">
            <summary>
            true if this hit directly results from an explosion
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.armorHeating">
            <summary>
            dynamic pierceability reduction
            </summary>
        </member>
        <member name="F:CryEngine.HitInfo.penetrationCount">
            <summary>
            number of surfaces the bullet has penetrated
            </summary>
        </member>
        <member name="M:CryEngine.CVar.#ctor(System.String,System.Object,CryEngine.CVarFlags,System.String)">
            <summary>
            Used by CryConsole.RegisterCVar to construct the CVar.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <param name="help"></param>
        </member>
        <member name="M:CryEngine.CVar.#ctor(System.String)">
            <summary>
            Used to construct an "empty" CVar used to handle C++ registered CVars.
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:CryEngine.CVarFlags.Null">
            <summary>
            just to have one recognizable spot where the flags are located in the Register call
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Cheat">
            <summary>
            stays in the default state when cheats are disabled
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ReadOnly">
            <summary>
            can not be changed by the user
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WarningNotUsed">
            <summary>
             shows warning that this var was not used in config file
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CopyName">
            <summary>
            otherwise the const char * to the name will be stored without copying the memory
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Modified">
            <summary>
            Set when variable value modified.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WasInConfig">
            <summary>
            Set when variable was present in config file.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Bitfield">
            <summary>
            Allow bitfield setting syntax.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.RestrictedMode">
            <summary>
            is visible and usable in restricted (normal user) console mode
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Invisible">
            <summary>
            Invisible to the user in console
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.AlwaysOnChange">
            <summary>
            Always accept variable value and call on change callback even if variable value didnt change
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.BlockFrame">
            <summary>
            Blocks the execution of console commands for one frame
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ConstCVar">
            <summary>
            Set if it is a const cvar not to be set inside cfg-files
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatAlwaysCheck">
            <summary>
            This variable is critical to check in every hash, since it's extremely vulnerable
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatNoCheck">
            <summary>
            This variable is set as VF_CHEAT but doesn't have to be checked/hashed since it's harmless to workaround
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.NotNetSyncedInternal">
            <summary>
            can be changed on client and when connecting the var not sent to the client (is set for all vars in Game/scripts/Network/cvars.txt)
            </summary>
        </member>
        <member name="T:CryEngine.CVarException">
            <summary>
            This exception is called when invalid CVar operations are performed.
            </summary>
        </member>
        <member name="T:CryEngine.ExcludeFromCompilationAttribute">
            <summary>
            If this attribute is attached to a class, it will be excluded from compilation.
            </summary>
        </member>
        <member name="T:CryEngine.DefaultGamemodeAttribute">
            <summary>
            Using this in a class will make it be used as the default game mode.
            </summary>
        </member>
        <member name="T:CryEngine.BasePlayer">
            <summary>
            WIP Player class.
            </summary>
        </member>
        <member name="M:CryEngine.BasePlayer.Initialize(System.UInt32,System.Int32)">
            <summary>
            Initializes the player.
            </summary>
            <param name="entityId"></param>
            <param name="channelId"></param>
        </member>
        <member name="T:CryEngine.Time">
            <summary>
            Contains useful functions related to game timing.
            </summary>
        </member>
        <member name="P:CryEngine.Time.DeltaTime">
            <summary>
            The time used to render the current frame. Useful for creating framerate independent operations.
            </summary>
            <example>public override void OnUpdate() { this.Position.X += 10 * CryTime.DeltaTime; }</example>
        </member>
        <member name="T:CryEngine.PhysicsParams">
            <summary>
            Wrapper class to make physics parameters more intuitive.
            </summary>
        </member>
        <member name="M:CryEngine.PhysicsParams.Save">
            <summary>
            Save the current physics settings.
            </summary>
        </member>
        <member name="M:CryEngine.PhysicsParams.Clear">
            <summary>
            Clears the current physics settings.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.AutoUpdate">
            <summary>
            If true, physics value updates will be automatically applied. Otherwise, Save() must be called manually.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Mass">
            <summary>
            The mass of the entity in kg.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Slot">
            <summary>
            The entity slot for which these physical parameters apply.
            </summary>
        </member>
        <member name="P:CryEngine.PhysicsParams.Stiffness">
            <summary>
            For characters: the scale of force in joint springs.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.slot">
            <summary>
            Index of object slot, -1 if all slots should be used.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.density">
            <summary>
            Only one either density or mass must be set, parameter set to 0 is ignored.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.stiffnessScale">
            <summary>
            Used for character physicalization (Scale of force in character joint's springs).
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.kInertia">
            <summary>
            inertia koefficient, the more it is, the less inertia is; 0 means no inertia
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.kInertiaAccel">
            <summary>
            inertia on acceleration
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.kAirControl">
            <summary>
            air control koefficient 0..1, 1 - special value (total control of movement)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.kAirResistance">
            <summary>
            standard air resistance 
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.gravity">
            <summary>
            gravity vector, utilizes sv_gravity if null.
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.nodSpeed">
            <summary>
            vertical camera shake speed after landings
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.swimming">
            <summary>
            whether entity is swimming (is not bound to ground plane)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.mass">
            <summary>
            mass (in kg)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.surface_idx">
            <summary>
            surface identifier for collisions
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.minSlideAngle">
            <summary>
            if surface slope is more than this angle, player starts sliding (angle is in radians)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.maxClimbAngle">
            <summary>
            player cannot climb surface which slope is steeper than this angle
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.maxJumpAngle">
            <summary>
            player is not allowed to jump towards ground if this angle is exceeded
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.minFallAngle">
            <summary>
            player starts falling when slope is steeper than this
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.maxVelGround">
            <summary>
            player cannot stand of surfaces that are moving faster than this
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.timeImpulseRecover">
            <summary>
            forcefully turns on inertia for that duration after receiving an impulse
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.collTypes">
            <summary>
            entity types to check collisions against
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.livingEntToIgnore">
            <summary>
            ignore collisions with this *living entity* (doesn't work with other entity types)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.active">
            <summary>
            0 disables all simulation for the character, apart from moving along the requested velocity
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDynamics.iRequestedTime">
            <summary>
            requests that the player rolls back to that time and re-exucutes pending actions during the next step
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.heightPivot">
            <summary>
            offset from central ground position that is considered entity center
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.heightEye">
            <summary>
            vertical offset of camera
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.sizeCollider">
            <summary>
            collision cylinder dimensions
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.heightCollider">
            <summary>
            vertical offset of collision geometry center
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.headRadius">
            <summary>
            radius of the 'head' geometry (used for camera offset)
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.heightHead">
            <summary>
            center.z of the head geometry
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.dirUnproj">
            <summary>
            unprojection direction to test in case the new position overlaps with the environment (can be 0 for 'auto')
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.maxUnproj">
            <summary>
            maximum allowed unprojection
            </summary>
        </member>
        <member name="F:CryEngine.PhysicalizationParams.PlayerDimensions.useCapsule">
            <summary>
            switches between capsule and cylinder collider geometry
            </summary>
        </member>
        <member name="T:CryEngine.ActorSystem">
            <summary>
            Used internally by this assembly for the Player base class.
            </summary>
        </member>
        <member name="T:CryEngine.Arduino.ArduinoHelper">
            <summary>
            Helper functions for Arduino communication.
            </summary>
        </member>
        <member name="P:CryEngine.Arduino.ArduinoHelper.Port">
            <summary>
            The main port used for serial communication.
            </summary>
        </member>
        <member name="T:CryEngine.Engine">
            <summary>
            Provides an direct interface to the 3DEngine.
            Mildly WIP.
            </summary>
        </member>
    </members>
</doc>
